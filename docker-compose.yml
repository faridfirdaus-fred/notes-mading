version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongo:27017/notes_mading}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    depends_on:
      - mongo
    networks:
      - app-network
    # Untuk production, tambahkan healthcheck
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # MongoDB service
  mongo:
    image: mongo:7.0
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    # Command untuk optimasi performa MongoDB
    command: --wiredTigerCacheSizeGB 0.5
    # Environment untuk MongoDB (opsional, sesuaikan kebutuhan)
    environment:
      - MONGO_INITDB_DATABASE=notes_mading
    # Untuk production, tambahkan healthcheck
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Ngrok service (opsional, untuk pengembangan)
  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    ports:
      - '4040:4040'
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    command: http app:3000
    networks:
      - app-network
    depends_on:
      - app

volumes:
  mongo-data:
    driver: local

networks:
  app-network:
    driver: bridge